<div class="required_info"></div><br/>
<%= form_with(model: controversy, local: true) do |form| %>
<% if controversy.errors.any? %>
  <div id="error_explanation">
    <h2><%= pluralize(controversy.errors.count, "error") %>
      prohibited this controversy from being saved:</h2>
    <ul>
      <% controversy.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
    </ul>
  </div>
<% end %>

<div class="row">
  <div class="col-8 mb-8">
    <div class="field">
      <%= form.label :title, 'Titulo', class: 'required' %>
      <%= form.text_field :title, class: 'form-control', required: true %>
    </div>

    <div class="field">
      <%= form.label :description, 'Descrição', class: 'required' %>
      <%= form.text_field :description, class: 'form-control', required: true %>
    </div>

    <% if company_user?  %>

      <div class="field">
        <%= form.hidden_field :sei, value: current_user.sei, required: true %>
      </div>

      <div class="field">
        <%= form.label :state_id, 'Estado', class: 'required' %>
        <%= form.select :state_id,State.where(id: current_user.company.state_ids).order('name ASC').map { |state| [state.name, state.id]}, {include_blank: 'Selecione um estado'}, {class: 'form-control boxed', required: true } %>
      </div>

      <div class="field">
        <%= form.label :city_id, 'Cidade', class: 'required' %>
        <%= form.select :city_id, [], {include_blank: 'Selecione um estado primeiro'}, {class: 'form-control boxed', required: true } %>
      </div>

      <div class="field">
        <%= form.label :cnes, 'UBS' %>
        <%= form.select :cnes, [], {include_blank: 'Selecione uma cidade primeiro'}, {class: 'form-control boxed' } %>
      </div>

      <script>

        const companySelect = document.getElementById('controversy_sei');
        const stateSelect = document.getElementById('controversy_state_id');
        const citySelect = document.getElementById('controversy_city_id');
        const ubsSelect = document.getElementById('controversy_cnes');

        stateSelect.addEventListener('change', () => jQuery.ajax({url: `/apoioaempresas/companies/${companySelect.value}/cities/${stateSelect.value}`, type: "GET", dataType: "json", success: insertCitiesData}));
        citySelect.addEventListener('change', () => jQuery.ajax({url: `/apoioaempresas/companies/${companySelect.value}/unities/${citySelect.value}`, type: "GET", dataType: "json", success: insertUBSData}));

        function insertCitiesData(cities) {
          let innerHTML = '<option value> Selecione a cidade </option>';
          for (let city of cities) {
            innerHTML += '<option value=' + city.id + '>' + city.name + '</option>'
          }
          citySelect.innerHTML = innerHTML;
        }

        function insertUBSData(unities) {
          let innerHTML = '<option value> Nenhuma em específico </option>';
          for (let unity of unities) {
            innerHTML += '<option value=' + unity.cnes + '>' + unity.name + '</option>'
          }
          ubsSelect.innerHTML = innerHTML
        }
      </script>
      <% elsif ubs_user? %>

        <div class="field">
          <%= form.hidden_field :city_id, value: current_user.city_id, required: true %>
          <%= form.hidden_field :cnes, value: current_user.cnes, required: true %>
          <%= form.hidden_field :sei, value: current_user.city.contract.sei, required: true %>
        </div>

        <% elsif city_user? %>

          <div class="field">
            <%= form.hidden_field :city_id, value: current_user.city_id, required: true %>
            <%= form.hidden_field :sei, value: current_user.city.contract.sei, required: true %>
          </div>

          <% elsif admin? || support_user? %>
            <div class="field">
              <%= form.label :sei, 'Empresa', class: 'required' %>
              <%= form.select :sei, Company.all.map(&:sei), {include_blank: 'Selecione uma empresa'}, {class: 'form-control boxed', required: true } %>
            </div>

            <div class="field">
              <%= form.label :state_id, 'Estado', class: 'required' %>
              <%= form.select :state_id, [], {include_blank: 'Selecione uma empresa primeiro'}, {class: 'form-control boxed', required: true } %>
            </div>

            <div class="field">
              <%= form.label :city_id, 'Cidade', class: 'required' %>
              <%= form.select :city_id, [], {include_blank: 'Selecione um estado primeiro'}, {class: 'form-control boxed', required: true } %>
            </div>

            <div class="field">
              <%= form.label :cnes, 'UBS' %>
              <%= form.select :cnes, [], {include_blank: 'Selecione uma cidade primeiro'}, {class: 'form-control boxed' } %>
            </div>

            <div class="field">
              <%= form.label :creator, 'Posição do criador', class: 'required' %>
              <%= form.select :creator, [['Empresa', 'company'], ['UBS', 'unity'], ['Cidade', 'city']], {include_blank: 'Selecione a posição do requisitante'}, {class: 'form-control boxed', required: true } %>
            </div>

            <div class="field">
              <%= form.label :user_creator, 'Usuário responsável', class: 'required' %>
              <%= form.select :user_creator, [], {include_blank: 'Preencha todos os campos obrigatórios acima primeiro'}, {class: 'form-control boxed', required: true } %>
            </div>

            <script>

              const companySelect = document.getElementById('controversy_sei');
              const stateSelect = document.getElementById('controversy_state_id');
              const citySelect = document.getElementById('controversy_city_id');
              const ubsSelect = document.getElementById('controversy_cnes');
              const creatorSelect = document.getElementById('controversy_creator');
              const userSelect = document.getElementById('controversy_user_creator');

              const triggeredByCompany = () => jQuery.ajax({url: `/apoioaempresas/companies/${companySelect.value}/states`, type: "GET", dataType: "json", success: insertStatesData});
              const triggeredByState = () => jQuery.ajax({url: `/apoioaempresas/companies/${companySelect.value}/cities/${stateSelect.value}`, type: "GET", dataType: "json", success: insertCitiesData})
              const triggeredByCity = () => jQuery.ajax({url: `/apoioaempresas/companies/${companySelect.value}/unities/${citySelect.value}`, type: "GET", dataType: "json", success: insertUBSData})
              const fetchUsers = () => {
                switch (creatorSelect.value) {
                  case 'company':
                    jQuery.ajax({url: `/apoioaempresas/companies/${companySelect.value}/users`, type: "GET", dataType: "json", success: insertUsersData});
                    break;
                  case 'city':
                    jQuery.ajax({url: `/apoioaempresas/cities/${citySelect.value}/users`, type: "GET", dataType: "json", success: insertUsersData});
                    break;
                  case 'unity':
                    jQuery.ajax({url: `/apoioaempresas/unities/${ubsSelect.value}/users`, type: "GET", dataType: "json", success: insertUsersData});
                    break;
                  default:
                    break;
                }
              }

              companySelect.addEventListener('change', triggeredByCompany);
              stateSelect.addEventListener('change', triggeredByState);
              citySelect.addEventListener('change', triggeredByCity);
              [creatorSelect, companySelect, stateSelect, citySelect, ubsSelect].forEach(element => element.addEventListener('change', fetchUsers))

              function insertUsersData(users) {
                let innerHTML = '<option value> Selecione o Usuário </option>';
                for (let user of users) {
                  innerHTML += '<option value=' + user.id + '>' + `${user.name} - ${user.cpf}` + '</option>'
                }
                if (users.length > 0)
                  userSelect.innerHTML = innerHTML;
                else
                  userSelect.innerHTML = '<option value="0"> Opção sem usuários válidos. Cheque as opções acima. </option>'
              }

              function insertStatesData(states) {
                let innerHTML = '<option value> Selecione o Estado </option>';
                for (let state of states) {
                  innerHTML += '<option value=' + state.id + '>' + state.name + '</option>'
                }
                stateSelect.innerHTML = innerHTML;
              }

              function insertCitiesData(cities) {
                let innerHTML = '<option value> Selecione a cidade </option>';
                for (let city of cities) {
                  innerHTML += '<option value=' + city.id + '>' + city.name + '</option>'
                }
                citySelect.innerHTML = innerHTML;
              }

              function insertUBSData(unities) {
                let innerHTML = '<option value> Nenhuma em específico </option>';
                for (let unity of unities) {
                  innerHTML += '<option value=' + unity.cnes + '>' + unity.name + '</option>'
                }
                ubsSelect.innerHTML = innerHTML
              }
            </script>
          <% end %>

          <div class="field">
            <%= form.label :category, 'Categoria', class: 'required' %>
            <%= form.select :category, Controversy.categories.map { |category| [category[0].titleize, category[0]] }, { include_blank: 'Selecione uma categoria' }, {class: 'form-control boxed', required: true } %>
          </div>

          <div class="form-group">
            <%= form.label :files, 'Arquivos' %>
            <%= form.text_field :files, id:'uuid-files', class: 'hidden'%>
            <div id="dropzone" class="future-dropzone">
              <div class="dz-default dz-message">
                Arraste arquivos aqui para adicioná-los
              </div>
            </div>
          </div>

          <%= form.submit 'Criar Controvérsia', class: 'btn btn-primary btn-sm' %>
          <%= link_to 'Cancelar', controversies_path, class: 'btn btn-danger btn-sm' %>
        </div>
      </div>
    <% end %>

    <script>

      let fileIds = [];

      $(document).ready(() => {

        // Adds the actual class, to prevent errors
        document.querySelector('.future-dropzone').classList.add('dropzone');

        // grap our upload form by its id
        $('#dropzone').dropzone({
          url: '/apoioaempresas/attachments',

          // restrict image size to a maximum 20MB
          maxFilesize: 20,

          // restrict to the maximum of 5 files
          maxFiles: 5,

          // Translations
          dictCancelUpload: 'Cancelar Upload',
          dictCancelUploadConfirmation: 'Deseja mesmo cancelar o Upload?',
          dictRemoveFile: 'Remover arquivo',
          dictDefaultMessage: 'Arraste arquivos aqui para adicioná-los',
          dictFallbackMessage: 'Esse browser não suporta o anexo de arquivos.',
          dictFileTooBig: 'Tamanho dos anexos excedido',
          dictInvalidFileType: 'Extensão de arquivo Inválida',
          dictMaxFilesExceeded: 'Quantidade de arquivos excedida',

          // show remove links on each image upload
          addRemoveLinks: true,

          // if the upload was successful
          success: (file, response) => {
            // find the remove button link of the uploaded file and give it an id based of the attachmentID response from the server
            $(file.previewTemplate).find('.dz-remove').attr('id', response.attachmentID);

            // Add to array
            fileIds.push(response.attachmentID);
            $('#uuid-files').val(fileIds);

            // add the dz-success class (the green tick sign)
            $(file.previewElement).addClass("dz-success");

          },
          //when the remove button is clicked
          removedfile: file => {

            // grap the id of the uploaded file we set earlier
            let id = $(file.previewTemplate).find('.dz-remove').attr('id');

            // Remove from array
            fileIds = fileIds.filter(uuid => uuid != id)
            $('#uuid-files').val(fileIds);

            // make a DELETE ajax request to delete the file
            $.ajax({
              type: 'DELETE',
              url: '/apoioaempresas/attachments/' + id,
              success: () => $(file.previewTemplate).fadeOut(),
              error: e => console.error(e)
            });
          }
        });
      })
    </script>
