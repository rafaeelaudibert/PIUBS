<%= tinymce_assets %>
<%= tinymce language: 'pt_BR' %>
<%= form_with(model: answer, local: true, :html => { :id => "faqForm"} ) do |form| %>
<% if answer.errors.any? %>
  <div id="error_explanation">
    <h2><%= pluralize(answer.errors.count, "error") %>
      prohibited this answer from being saved:</h2>

    <ul>
      <% answer.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
    </ul>
  </div>
<% end %>
<div class="form" style="max-width: 700px">
  <div class="required_info"></div><br/>
  <div class="field">
    <%= form.label :question, 'Questão', class: 'required' %>
    <% if @question %>
      <%= form.text_field :question, value: @question.title, required: true %>
    <% else %>
      <%= form.text_field :question, class: 'form-control boxed', required: true %>
    <% end %>
  </div>

  <div class="field">
    <%= form.label :answer, 'Resposta', class: 'required' %>
    <% if @reply %>
      <%= form.text_area :answer,id:'tinymce', class: 'tinymce', value: strip_tags(@reply.description.gsub("&nbsp;", "")), rows: 15 %>
    <% else %>
      <%= form.text_area :answer, id:'tinymce', class: 'tinymce', rows: 15 %>
    <% end %>
  </div>

  <div class="field">
    <%= form.label :keywords, 'Palavras-chave (separadas por vírgula ou ponto-e-vírgula)', class: 'required' %>
    <%= form.text_field :keywords, 'data-role': 'tagsinput', placeholder: ' ' %>
  </div>



  <div class="form-group">
    <%= form.label :files, 'Arquivos (selecione todos os arquivos necessários pressionando a tecla CTRL)' %>
    <%= form.text_field :files, id:'uuid-files', class: 'hidden'%>
    <div id="dropzone" class="future-dropzone">
      <div class="dz-default dz-message">
        Arraste arquivos aqui para adicioná-los
      </div>
    </div>
  </div>

  <% text = 'display: none' %>
    <% if @question %>
      <div class="field" style="display: none">
        <%= form.label :category_id, 'Categoria', class: 'required' %>
        <%= form.text_field :category_id, value: @question.category.id, required: true %>

      </div>
      <%= hidden_field_tag :question_id, @question.id %>
    <% else %>
      <div class="field">
        <%= form.label :category_id, 'Categoria', class: 'required' %>

        <select skip_default_ids="false" allow_method_names_outside_object="true" name="answer[category_id]" id="answer_category_id" class="form-control" required="required">
          <option value="0">Selecione uma categoria:</option>
          <%= inside_layout "categories/category_select", {categ: @categories, selected: @answer.category} do %>
            <%= yield %>
          <% end %>
        </select>
      </div>
    <% end %>

    <div class="field" style="display: none">
      <%= form.label :user_id, 'Usuário', class: 'required' %>
      <%= form.text_field :user_id, value: current_user.id, required: true %>
    </div>

    <div class="field">
      <% if params[:source] == 'controversy' && !@reply && params[:action] == 'new' %>
        <%= form.text_field :source, value: :from_controversy, required: true, class: 'hidden' %>
      <% elsif params[:source] == 'call' && !@reply && params[:action] == 'new'  %>
        <%= form.text_field :source, value: :from_call, required: true, class: 'hidden' %>
      <% end %>
    </div>

    <% if action_name == 'edit' && current_user.role == 'admin' %>
      <div class="form-check form-check-inline">
        <%= form.check_box :faq, class: "form-check-input" %>
        <%= form.label :faq, value: "#{@answer.faq ? 'Manter no' : 'Adicionar ao'} FAQ?",
                             class: 'form-check-label' %>
      </div>
      <br/>
      <br/>
    <% else %>
      <% unless @reply && @reply.faq == true %>
        <div class="form-check form-check-inline" hidden="hidden">
          <%= form.check_box :faq, class: "form-check-input", checked: true %>
          <%= form.label :faq, value: 'Adicionar ao FAQ?', class: 'form-check-label' %>
        </div>
        <br/>
      <% end %>
    <% end %>

    <%= form.submit 'Salvar Questão',:class => 'btn btn-primary btn-sm' %>
    <%= link_to 'Cancelar', faq_path, :class => 'btn btn-danger btn-sm' %>

  </div>
<% end %>

<script type="text/javascript">

  let fileIds = []
  $(document).ready(function(){
      // Adds the actual class, to prevent errors
      document.querySelector('.future-dropzone').classList.add('dropzone');

        // grap our upload form by its id
      $('#dropzone').dropzone({
          url: '/attachments',

          // restrict image size to a maximum 20MB
          maxFilesize: 20,

          // restrict to the maximum of 5 files
          maxFiles: 5,

          // Translations
          dictCancelUpload: 'Cancelar Upload',
          dictCancelUploadConfirmation: 'Deseja mesmo cancelar o Upload?',
          dictRemoveFile: 'Remover arquivo',
          dictDefaultMessage: 'Arraste arquivos aqui para adicioná-los',
          dictFallbackMessage: 'Esse browser não suporta o anexo de arquivos.',
          dictFileTooBig: 'Tamanho dos anexos excedido',
          dictInvalidFileType: 'Extensão de arquivo Inválida',
          dictMaxFilesExceeded: 'Quantidade de arquivos excedida',

          // show remove links on each image upload
          addRemoveLinks: true,

          // if the upload was successful
          success: (file, response) => {
              // find the remove button link of the uploaded file and give it an id
              // based of the attachmentID response from the server
              $(file.previewTemplate).find('.dz-remove').attr('id', response.attachmentID);

              // Add to array
              fileIds.push(response.attachmentID);
              $('#uuid-files').val(fileIds);

              // add the dz-success class (the green tick sign)
              $(file.previewElement).addClass("dz-success");

          },
          //when the remove button is clicked
          removedfile: file => {

              // grap the id of the uploaded file we set earlier
              let id = $(file.previewTemplate).find('.dz-remove').attr('id');

              // Remove from array
              fileIds = fileIds.filter(uuid => uuid != id)
              $('#uuid-files').val(fileIds);

              // make a DELETE ajax request to delete the file
              $.ajax({
                  type: 'DELETE',
                  url: '/attachments/' + id,
                  success: () => $(file.previewTemplate).fadeOut(),
                  error: e => console.error(e)
              });
          }
      });


      <% if action_name == 'edit' %>
      const l = location.href.split('/')
      $.ajax({
        url: '/answers/attachments/' + l[l.length-2],
        type: "GET",
        dataType: "json",
        success: data => {

          // Set the ids
          fileIds = data.map(val => val.id).reduce((acc, val) => acc.concat(val), [])
          $('#uuid-files').val(fileIds);

          // Fake their adittion in the reply-dropzone
          data.forEach( val => {
            let mockFile = {
                      name: val.filename,
                      size: val.bytes,
                      type: val.type,
                      accepted: true            // required if using 'MaxFiles' option
                  };
            dropzone = $('#dropzone')[0].dropzone
            dropzone.files.push(mockFile);
            dropzone.emit('addedfile', mockFile);
            dropzone.emit('complete', mockFile);
            $(dropzone.files[dropzone.files.length - 1]
                                            .previewElement).find('.dz-remove').attr('id', val.id);
          })
        }
      });

      <% end %>
  });

</script>
